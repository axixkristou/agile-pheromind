{
  "scribeSettings": {
    "defaultPheromoneFile": ".pheromone",
    "backupPheromoneBeforeWrite": true,
    "logLevel": "INFO",
    "defaultLanguageForMemoryBank": "en-US"
  },
  "interpretationLogic": [
    {
      "id": "log_general_agent_activity_en",
      "priority": 999,
      "conditions": [
        {
          "field": "summaryText_en",
          "operator": "isNotEmpty"
        }
      ],
      "actions": [
        {
          "type": "appendToMemoryBankSection",
          "targetSection": "memoryBank.agentActivityLog",
          "value": {
            "timestamp": "{{timestamp}}",
            "agent": "{{agentName}}",
            "handoffReason": "{{handoffReasonCode}}",
            "summary_en": "{{summaryText_en | truncate:500}}"
          }
        }
      ]
    },
    {
      "id": "bootstrap_update_user_and_project_info_v2",
      "priority": 5,
      "conditions": [
        {
          "field": "agentName",
          "operator": "equals",
          "value": "@project-setup-agent"
        },
        {
          "field": "summaryText_en",
          "operator": "contains",
          "value": "AgilePheromind User and Project Info for Bootstrap"
        },
        {
          "field": "structuredData.user.azureDevOps.username",
          "operator": "isNotEmpty"
        },
        {
          "field": "structuredData.projectConnection.gitRepository.localPath",
          "operator": "isNotEmpty"
        }
      ],
      "actions": [
        {
          "type": "updateLocalUserInfoFile",
          "filePath": ".agilepherominduserinfo",
          "dataFromStructuredData": "user",
          "mergeStrategy": "deep"
        },
        {
          "type": "updateLocalUserInfoFile",
          "filePath": ".agilepherominduserinfo",
          "dataFromStructuredData": "projectConnection",
          "mergeStrategy": "deep"
        },
        {
          "type": "updatePheromoneField",
          "targetField": "currentUser.pheromindId",
          "valueFromStructuredData": "user.pheromindId"
        },
        {
          "type": "updatePheromoneField",
          "targetField": "currentUser.azureDevOpsUsername",
          "valueFromStructuredData": "user.azureDevOps.username"
        },
        {
          "type": "updatePheromoneField",
          "targetField": "currentUser.azureDevOpsDisplayName",
          "valueFromStructuredData": "user.azureDevOps.displayName"
        },
        {
          "type": "updatePheromoneField",
          "targetField": "currentUser.azureDevOpsUserId",
          "valueFromStructuredData": "user.azureDevOps.userId"
        },
        {
          "type": "updatePheromoneField",
          "targetField": "currentUser.preferredLanguage",
          "valueFromStructuredData": "user.preferences.preferredLanguage"
        },
        {
          "type": "updatePheromoneField",
          "targetField": "currentUser.lastInteractionLanguage",
          "valueFromStructuredData": "user.lastKnownInteractionLanguage"
        },
        {
          "type": "updatePheromoneField",
          "targetField": "currentProject.azureDevOps.organizationUrl",
          "valueFromStructuredData": "projectConnection.azureDevOps.organizationUrl"
        },
        {
          "type": "updatePheromoneField",
          "targetField": "currentProject.azureDevOps.projectName",
          "valueFromStructuredData": "projectConnection.azureDevOps.projectName"
        },
        {
          "type": "updatePheromoneField",
          "targetField": "currentProject.azureDevOps.projectId",
          "valueFromStructuredData": "projectConnection.azureDevOps.projectId"
        },
        {
          "type": "updatePheromoneField",
          "targetField": "currentProject.gitRepository.localPath",
          "valueFromStructuredData": "projectConnection.gitRepository.localPath"
        },
        {
          "type": "updatePheromoneField",
          "targetField": "currentProject.gitRepository.remoteUrl",
          "valueFromStructuredData": "projectConnection.gitRepository.remoteUrl"
        },
        {
          "type": "updatePheromoneField",
          "targetField": "currentProject.gitRepository.defaultBranchPheromind",
          "valueFromStructuredData": "projectConnection.gitRepository.defaultBranchPheromind"
        },
        {
          "type": "updatePheromoneFlag",
          "flagName": "onboardingComplete",
          "value": true
        }
      ]
    },
    {
      "id": "process_clarification_request_initiation_v2_en",
      "priority": 15,
      "conditions": [
        {
          "field": "summaryText_en",
          "operator": "matches",
          "value": "Clarification needed by agent '{{originalAgent}}' for '{{originalPromptContext_en}}'. Question \\(English\\): '{{clarificationQuestion_en}}'. Clarification ID: {{clarificationId}}."
        }
      ],
      "actions": [
        {
          "type": "updatePheromoneField",
          "targetField": "clarificationContext",
          "value": {
            "pendingClarificationId": "{{clarificationId}}",
            "originalAgent": "{{originalAgent}}",
            "originalPromptContext_en": "{{originalPromptContext_en}}",
            "clarificationQuestion_en": "{{clarificationQuestion_en}}",
            "timestampRequested": "{{timestamp}}"
          }
        }
      ]
    },
    {
      "id": "process_clarification_response_from_user_v2_en",
      "priority": 16,
      "conditions": [
        {
          "field": "summaryText_en",
          "operator": "matches",
          "value": "User response for clarification ID '{{clarificationId}}'. User response \\(original lang\\): '{{userResponseInOriginalLang}}'. Original English question: '{{originalQuestion_en}}'. Agent: '{{originalAgent}}'."
        }
      ],
      "actions": [
        {
          "type": "appendToMemoryBankSection",
          "targetSection": "memoryBank.clarificationHistory",
          "value": {
            "clarificationId": "{{clarificationId}}",
            "originalAgent": "{{originalAgent}}",
            "originalPromptContext_en": "{{clarificationContext.originalPromptContext_en}}",
            "questionToUser_en": "{{originalQuestion_en}}",
            "userResponse_originalLang": "{{userResponseInOriginalLang}}",
            "timestampRequested": "{{clarificationContext.timestampRequested}}",
            "timestampResponded": "{{timestamp}}",
            "impactOnWorkflow_en": "Response provided to UO for workflow resumption."
          }
        },
        {
          "type": "updatePheromoneField",
          "targetField": "clarificationContext.pendingClarificationId",
          "value": null
        }
      ]
    },
    {
      "id": "process_report_generation_with_reasoning_localized_output",
      "priority": 20,
      "comment": "Generic rule for agents that produce a main report (potentially localized) and have reasoning.",
      "conditions": [
        {
          "field": "summaryText_en",
          "operator": "matches",
          "value": ".* Report \\((in `{{outputLang}}`|English), .*reasoning.*\\) at `{{reportPath}}`."
        },
        {
          "field": "agentName",
          "operator": "in",
          "values": [
            "@po-assistant",
            "@task-breakdown-estimator",
            "@test-generator-agent",
            "@code-reviewer-assistant",
            "@migration-analyst-agent",
            "@documentation-writer-agent",
            "@risk-manager-agent",
            "@workflow-optimizer-agent",
            "@deployment-agent-aks",
            "@performance-optimization-agent",
            "@accessibility-compliance-agent",
            "@learning-integration-agent"
          ]
        }
      ],
      "actions": [
        {
          "type": "addToDocumentationRegistry",
          "documentPathFromSummary_en": "{{reportPath}}",
          "description_en": "{{agentName}} report (output lang: {{outputLang | or:'en-US'}}), includes reasoning. {{summaryText_en | extractShortPurpose}}",
          "documentType": "{{agentName | stripAgentPrefix}}Report"
        },
        {
          "type": "updateMemoryBankLinkToReasoning",
          "agentName": "{{agentName}}",
          "reportPathFromSummary_en": "{{reportPath}}",
          "contextIdFromPheromone": "{{activeUserStory.id | or: activeTask.id | or: activePullRequest.id | or: 'general'}}"
        }
      ]
    },
    {
      "id": "process_workflow_error_logging_v3_en",
      "priority": 5,
      "conditions": [
        {
          "field": "summaryText_en",
          "operator": "containsAny",
          "values": ["FAILURE", "ERROR", "FAILED", "UNABLE TO PROCEED", "MCP_CALL_FAILED", "COMMAND_EXECUTION_FAILED"]
        },
        {
          "field": "agentName",
          "operator": "notEquals",
          "value": "✍️ @orchestrator-pheromone-scribe"
        }
      ],
      "actions": [
        {
          "type": "updatePheromoneField",
          "targetField": "activeWorkflow.lastError",
          "value": {
            "agent": "{{agentName}}",
            "phase_en": "{{activeWorkflow.currentPhase}}",
            "message_en": "{{summaryText_en}}",
            "timestamp": "{{timestamp}}"
          }
        },
        {
          "type": "updatePheromoneField",
          "targetField": "activeWorkflow.status",
          "value": "Error"
        }
      ]
    }
  ],
  "actionImplementations": {
    "updatePheromoneField": "Updates a direct field in the root of the .pheromone object. Uses dot notation for nested fields. Can create fields if they don't exist.",
    "appendToMemoryBankSection": "Appends a value to a list within a specific section of .pheromone.memoryBank. Creates list if needed. Target field can use '[]' to signify appending to a list.",
    "updateMemoryBankField": "Updates a field within the .pheromone.memoryBank object. Uses dot notation. Can create fields. Supports '[]' for appending to lists. Can use 'mergeStrategy: \"deep\"'.",
    "addToDocumentationRegistry": "Adds or updates an entry in .pheromone.documentationRegistry (key: path, value: {description_en, documentType, timestamp}).",
    "addToDocumentationRegistryIfPath": "Similar to addToDocumentationRegistry, but only acts if a valid path is extracted from summaryText_en.",
    "updateLocalUserInfoFile": "ACTION RESERVED FOR SCRIBE DURING BOOTSTRAP ONLY. Updates local '.agilepherominduserinfo'. Uses dot notation for target fields. Supports 'mergeStrategy: \"deep\"'.",
    "updatePheromoneFlag": "Sets a simple boolean flag at root of .pheromone.",
    "updateMemoryBankLinkToReasoning": "Special action to link a report (containing reasoning) to the relevant entity in memoryBank (e.g., userStory, task, general system learning). Example: for @po-assistant and usId 'Azure#123', sets `memoryBank.userStories.Azure#123.reasoningChainLinks_en.poAnalysis = reportPath`."
  },
  "valueExtractors": {
    "extractFilename": "Extracts filename from a full path string.",
    "extractFilenameWithoutExt": "Extracts filename without extension.",
    "extractKeyFindings": "Attempts to get a very short English summary of key findings from a longer English text.",
    "extractOverallStatus": "Tries to determine an overall status (e.g., OK, Warning, Error, Pass, Fail) from an English summary text.",
    "extractLogLink": "Looks for URLs or file paths that seem to be log files in an English summary.",
    "extractLogPath": "Extracts a file path if explicitly mentioned for logging in an English summary.",
    "toInt": "Converts extracted string value to an integer, defaults to 0 if conversion fails.",
    "toLower": "Converts string to lowercase.",
    "replace": "Replaces occurrences. Usage: {{value | replace:'find':'replace'}}",
    "truncate": "Truncates string. Usage: {{value | truncate:maxLength}}",
    "or": "Fallback value. Usage: {{primaryValue | or:fallbackValue}}",
    "stripAgentPrefix": "Removes '@' and agent type suffix, e.g. '@po-assistant' becomes 'PO'.",
    "extractShortPurpose": "Extracts a very brief purpose from a longer summary, e.g. the main noun/verb phrase."
  }
}